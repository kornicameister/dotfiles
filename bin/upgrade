#!/usr/bin/env bash

K_DOTFILES_DIR="${K_DOTFILES_DIR:-${HOME}/.dotfiles}"

if [[ -n ${CI} ]]; then
    sudo() {
        "$@"
    }
fi

in_progress () {
  printf "\\r  [ \\033[00;34m⏰\\033[0m ] %s\\r" "${1}"
}

success () {
  printf "\\r\\033[2K  [ \\033[00;32m👍\\033[0m ] %s\\n" "${1}"
}

error () {
  printf "\\r\\033[2K  [\\033[0;31m👎\\033[0m ] %s\\n" "${1}"
}

exec_fn() {
    in_progress "${1}"

    start_time=$(date +%s)

    if $1 >/dev/null; then
        end_time=$(date +%s)
        total_time="$(( end_time - start_time ))"
        success "${1} in ${total_time} seconds"
    else
        error "${1}"
    fi
}

os_upgrade() {
    sudo true
    sudo aptitude update -yq;
    sudo aptitude safe-upgrade -yq;
    sudo aptitude autoclean -yq;
    sudo aptitude clean -yq;
    sudo aptitude purge '~c' -yq;
    sudo aptitude purge --purge-unused -yq;
}

hadolint_upgrade() {
    if command -v docker >/dev/null 2>&1; then
        docker pull hadolint/hadolint
    fi
}

neovim_clients_upgrade() (

    for py_major in {2,3}; do
        venv_name="neovim${py_major}"
        venv_dir="${PYENV_ROOT}/versions/${venv_name}"

        echo "Upgrading requirements for ${venv_name}"

        if [ -d "${venv_dir}" ]; then
            "${venv_dir}"/bin/pip install -r "${K_DOTFILES_DIR}/neovim-requirements.txt"
        fi
    done

    if command -v npm >/dev/null 2>&1; then
        npm upgrade -g neovim prettier typescript
        if command -v nodenv >/dev/null 2>&1; then
            nodenv rehash
        fi
    fi
)

neovim_plugings_upgrade() {
    nvim +PlugUpgrade +PlugInstall +PlugClean +PlugUpdate +qall!
}

docker_compose_upgrade() {
    if command -v docker >/dev/null 2>&1; then
        local remote_compose_version
        local local_compose_version

        remote_compose_version=$(git ls-remote https://github.com/docker/compose | grep refs/tags | grep -oP "[0-9]+\\.[0-9][0-9]+\\.[0-9]+$" | tail -n 1)
        local_compose_version=$(docker-compose --version | grep -oP "[0-9]+\\.[0-9][0-9]+\\.[0-9]" | tail -n 1)

        if [ "${remote_compose_version}" != "${local_compose_version}" ]; then
            echo "Upgrading docker-compose to ${remote_compose_version}"

            local uname_s
            local uname_m

            uname_s=$(uname -s)
            uname_m=$(uname -m)

            sudo sh -c "curl -L https://github.com/docker/compose/releases/download/${remote_compose_version}/docker-compose-${uname_s}-${uname_m} > /usr/local/bin/docker-compose"
            sudo chmod +x /usr/local/bin/docker-compose
        fi
    fi
}

snap_refresh() {
    if command -v snap >/dev/null 2>&1; then
        snap refresh
    fi
}

remove_unwanted_kernels() {
    if command -v purge-old-kernels 2>&1; then
        sudo purge-old-kernels -qy
    fi
}

clear_thumbnails() {
    if [ -d "${HOME}/.cache/thumbnails" ]; then
        sudo rm -rf "${HOME}/.cache/thumbnails/*"
    fi
}

exec_fn os_upgrade
exec_fn remove_unwanted_kernels
exec_fn docker_compose_upgrade
exec_fn hadolint_upgrade
exec_fn neovim_clients_upgrade
exec_fn neovim_plugings_upgrade
exec_fn snap_refresh
exec_fn clear_thumbnails
