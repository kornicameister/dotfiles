#!/usr/bin/env bash

set -e

INSTALL_CONFIG="install.conf.yaml"
PKG_CONFIG="pkg.install.conf.yaml"

DOTBOT_DIR="dotbot"

DOTBOT_BIN="bin/dotbot"
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

USERNAME="${1:-""}"
PASSWORD="${2:-""}"
EMAIL="${3:-""}"

# boolean variables
TRUE=1
FALSE=0

# helper functions
_is_distro() {
    local distro_name
    local expected_distro

    expected_distro=$(echo $1 | tr '[:upper:]' '[:lower:]')
    distro_name=$(lsb_release -a 2>/dev/null | grep -i Description | tr '[:upper:]' '[:lower:]' | awk -F':' '{print $2}' | tr -d '[:space:]')
    if [[ $distro_name =~ .*$expected_distro.* ]]; then
        echo $TRUE
    else
        echo $FALSE
    fi
}

_welcome_message() {
    local distro_welcome
    local first_run_welcome

    if (($IS_LINUX_MINT)); then
        distro_welcome="[Linux Mint]"
    elif (($IS_LINUX_UBUNTU)); then
        distro_welcome="[Linux Ubuntu]"
    else
        distro_welcome="[Unknown distro]"
    fi

    if [ ! -f "${HOME}/.gitconfig.local" ]; then
        first_run_welcome="kornicameister/dotfiles - first run"
    else
        first_run_welcome="kornicameister/dotfiles - updating"
    fi

    echo "${distro_welcome} : ${first_run_welcome} : ${USERNAME}"
}

# CI handling
CI=${CI:-False}
if [[ $CI ]]; then
    sudo() {
        "$@"
    }
fi

# OS flags
IS_LINUX_MINT=$(_is_distro "mint")
IS_LINUX_UBUNTU=$(_is_distro "ubuntu")

execute_dotbot_pkg_install() {
    pushd "${BASEDIR}"
    sudo -EH \
        "${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" \
        -v \
        -d "${BASEDIR}" \
        -p "${BASEDIR}/dependencies/dotbot_plugin_aptget/aptget.py" \
        -c "${PKG_CONFIG}"
    pushd "${BASEDIR}"
}

execute_dotbot_config_install() {
    pushd "${BASEDIR}"
    "${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" \
        -v \
        -d "${BASEDIR}" \
        -c "${INSTALL_CONFIG}"
    popd
}

setup_git() {
    # generate ssh key
    mkdir -p "${HOME}/.ssh"
    ssh-keygen \
        -t ed25519 \
        -b 4096 \
        -C "${EMAIL}" \
        -f "${HOME}/.ssh/github" \
        -N "${PASSWORD}"

    # generating GPK key to sign the commits
    gpg2 --full-gen-key

    # assumed the highest rsa length:
    local signingKey=""
    signingKey=$(gpg2 --list-secret-keys --keyid-format LONG | grep -B 2 "${EMAIL}" | grep sec | awk -F"[/ ]+" '/rsa4096/{print $3}')

    cat > "${HOME}/.gitconfig.local" << EOF
[user]
    name=${USERNAME}
    email=${EMAIL}
    signingKey=${signingKey}

[gpg]
    program=gpg2

[commit]
    gpgsign=true
EOF

    echo "Remember to upload the GPG and SSH keys to Github"
}

setup_nvim_as_default_editor() {
    sudo update-alternatives --install /usr/bin/editor editor /usr/bin/nvim 1
    sudo update-alternatives --set editor /usr/bin/nvim
}

_welcome_message

if [ ! -d "${BASEDIR}/dependencies" ]; then
    git submodule update --init --recursive
fi

if [ ! -f "${HOME}/.gitconfig.local" ]; then
    args=("$@")
    argsCount=${#args[@]}
    if [ "${argsCount}" -ne 3 ]; then
        echo "Invalid arguments, example: ./install {git_user} {git_password} {git_email}"
    fi

    if [ -z "${USERNAME}" ]; then
        echo "git_user must be set"
        exit 1
    fi
    if [ -z "${PASSWORD}" ]; then
        echo "git_password must be set"
        exit 1
    fi
    if [ -z "${EMAIL}" ]; then
        echo "git_email must be set"
        exit 1
    fi

    execute_dotbot_pkg_install
    execute_dotbot_config_install
    setup_git
    setup_nvim_as_default_editor
else
    execute_dotbot_config_install
    (pyenv update ; pyenv rehash)
    (nodenv update ; nodenv rehash)
fi

