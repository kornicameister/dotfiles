#!/usr/bin/env bash

# CI handling
CI=${CI:-False}
if [[ -n ${CI} ]]; then
    sudo() {
        "$@"
    }
fi

INSTALL_CONFIG="install.conf.yaml"
PKG_CONFIG="pkg.install.conf.yaml"

DOTBOT_DIR="dotbot"

DOTBOT_BIN="bin/dotbot"
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

USERNAME=""
PASSWORD=""
EMAIL=""

GPG_FULL_NAME=""
GPG_PASSPHRASE=""

# if there is no .gitconfig.local that is meant to be created
# to setup git/github configuration user specific way (or rather) machine specific way
[ ! -f "${HOME}/.gitconfig.local" ] && INSTALL_FULL=True || INSTALL_FULL=False

# if INSTALL_FULL is set that it means that we gotta install packages as well
[[ "${INSTALL_FULL}" == True ]] && INSTALL_PKGS_ONLY=True || INSTALL_PKGS_ONLY=False

# if INSTALL_CONFIG_ONLY is always set to true by default because I want symlinks to be
# checked and recreated/created on each run
INSTALL_CONFIG_ONLY=True

# Force mode actually applies only to a situation where we have already deployed
# but we wish to reinstall packages thus following things are correct
# --only pkg --force
# --force
FORCE_MODE=False

while [ $# -gt 0 ]; do
    case "${1}" in
        '-u'|'--user')
            shift
            USERNAME="${1}"
            shift
            ;;
        '-p'|'--password')
            shift
            PASSWORD="${1}"
            shift
            ;;
        '-e'|'--email')
            shift
            EMAIL="${1}"
            shift
            ;;
        '-gn'|'--gpg-fullname')
            shift
            GPG_FULL_NAME="${1}"
            shift
            ;;
        '-gp'|'--gpg-passphrase')
            shift
            GPG_PASSPHRASE="${1}"
            shift
            ;;
        '--only')
            shift
            case "${1}" in
                'pkg')
                    INSTALL_PKGS_ONLY=True
                    ;;
                'config')
                    INSTALL_CONFIG_ONLY=True
                    ;;
                esac
            shift
            ;;
        '--force')
            FORCE_MODE=true
            shift
            ;;
        '--')
            shift
            ;;
        *)
            break
            ;;
    esac
done

_welcome_message() {
    if command -v lsb_release >/dev/null 2>&1; then
        distro_name=$(lsb_release -sd 2>&1)
    else
        distro_name="Unknown"
    fi

    if ((INSTALL_FULL)); then
        first_run_welcome="kornicameister/dotfiles - first run"
    else
        first_run_welcome="kornicameister/dotfiles - updating"
    fi

    echo "${distro_name} : ${first_run_welcome} : ${USERNAME}"
}

_validate_args() {
    if [ -z "${USERNAME}" ]; then
        echo "git_user must be set"
        exit 1
    fi
    if [ -z "${PASSWORD}" ]; then
        echo "git_password must be set"
        exit 2
    fi
    if [ -z "${EMAIL}" ]; then
        echo "git_email must be set"
        exit 3
    fi
    if [ -z "${GPG_FULL_NAME}" ]; then
        echo "gpg_full_name must be set"
        exit 4
    fi
    if [ -z "${GPG_PASSPHRASE}" ]; then
        echo "gpg_passphrase must be set"
        exit 5
    fi
}

_parse_args() {
    if ((INSTALL_FULL); then
        exit 0
    fi
}

execute_dotbot_pkg_install() {
    cd "${BASEDIR}" || exit 1
    sudo \
        "${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" \
        -v \
        -d "${BASEDIR}" \
        -p "${BASEDIR}/dependencies/dotbot_plugin_aptget/aptget.py" \
        -c "${PKG_CONFIG}"
    cd - || exit 1
}

execute_dotbot_config_install() {
    cd "${BASEDIR}" || exit 1
    "${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" \
        -v \
        -d "${BASEDIR}" \
        -c "${INSTALL_CONFIG}"
    cd - || 1
}

setup_git() {
    # generate ssh key
    mkdir -p "${HOME}/.ssh"
    ssh-keygen \
        -t ed25519 \
        -b 4096 \
        -C "${EMAIL}" \
        -f "${HOME}/.ssh/github" \
        -N "${PASSWORD}"

    key_type="rsa"
    key_strength=4096
    key_config=$(mktemp)

    # generating GPK key to sign the commits
    cat >>"${key_config}" <<EOF
Key-Type: ${key_type}
Key-Length: ${key_strength}
Name-Real: ${GPG_FULL_NAME}
Name-Comment: ${USERNAME} GPG key generated with dotfiles
Name-Email: ${EMAIL}
Expire-Date: 0
Passphrase: ${GPG_PASSPHRASE}
EOF
    gpg2 --quiet --batch --expert --full-gen-key "${key_config}"
    rm -rf "${key_config}"

    # assumed the highest rsa length:
    local signingKey=""
    signingKey=$(gpg2 --list-secret-keys --keyid-format LONG | grep -B 2 "${EMAIL}" | grep sec | awk -F"[/ ]+" '{print $3}')

    cat > "${HOME}/.gitconfig.local" << EOF
[user]
    name=${USERNAME}
    email=${EMAIL}
    signingKey=${signingKey}

[gpg]
    program=gpg2

[commit]
    gpgsign=true

[github]
    user=${USERNAME}
EOF

    echo "Remember to upload the GPG and SSH keys to Github"
}

setup_nvim_as_default_editor() {
    sudo update-alternatives --install /usr/bin/editor editor /usr/bin/nvim 1
    sudo update-alternatives --set editor /usr/bin/nvim
}

_welcome_message
git submodule update --init --recursive

if ((INSTALL_FULL)); then
    _validate_args
    execute_dotbot_pkg_install
    execute_dotbot_config_install
    setup_git
    setup_nvim_as_default_editor
else
    execute_dotbot_config_install
fi
