[init]
    templatedir = ~/.git_template

[core]
    editor = nvim
    excludesfile = ~/.gitignore

    # dont ignore case
    ignorecase = false

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

    # diff-so-fancy
    pager = diff-so-fancy | less --tabs=4 -F -K -X -R -i

[include]
    path = ~/.gitconfig.local

[alias]
    tags = tag -l
    branches = branch -a
    remotes = remote -v
    fixup = commit --fixup
    fresh =  ! git_fresh

[apply]
<<<<<<< HEAD
    whitespace = fix # detect whitespace errors when applying a patch
||||||| merged common ancestors

    # Detect whitespace errors when applying a patch
    whitespace = fix

[url "https://github.com/"]
    insteadof = git://github.com/

[url "https://git.openstack.org/"]
    insteadof = git://git.openstack.org/
=======
    whitespace = fix # detect whitespace errors when applying a patch

[url "https://github.com/"]
    insteadof = git://github.com/

[url "https://git.openstack.org/"]
    insteadof = git://git.openstack.org/
>>>>>>> better git config

[gc]
    auto = 1

[pull]
    rebase = true

[push]
    default = simple

[fetch]
    prune = true             # delete local branches if remotes are gone

[rebase]
    autosquash = true        # auto squash fixups by default
    autostash = true         # auto git stash ; git stash pop when rebasing

[status]
    submoduleSummary = true  # show submodules summary by default

[rerere]
<<<<<<< HEAD
     enabled = 1

[branch]
    autosetupmerge = true    # auto track branches
    autoseituprebase = always
||||||| merged common ancestors
	enabled = 1
=======
    enabled = 1

[branch]
    autosetupmerge = true    # auto track branches
    autoseituprebase = always
>>>>>>> better git config

[merge]
<<<<<<< HEAD
    summary = true
    status = true
    tool = nvimmerge
    conflictstyle = diff3
[mergetool]
    prompt = true
[mergetool "nvimmerge"]
    cmd = nvim -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
||||||| merged common ancestors
	summary = true
	tool = nvimmerge
	conflictstyle = diff3
=======
    summary = true
    status = true
    tool = nvimmerge
    conflictstyle = diff3
>>>>>>> better git config

[diff]
<<<<<<< HEAD
    algorithm = patience
    renames = copies         # try to spot renaming of files
    tool = nvimdiff
    guitool = opendiff
[difftool]
    prompt = true
[difftool "nvimdiff"]
    cmd = nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
||||||| merged common ancestors
	tool = nvimdiff
	guitool = opendiff
=======
    algorithm = patience
    renames = copies         # try to spot renaming of files
    tool = nvimdiff
    guitool = opendiff

[help]
    autocorrect = 1

[color]
  ui = true

[credential]
    helper = cache --timeout=28800
>>>>>>> better git config

<<<<<<< HEAD
[color]
    ui = true
||||||| merged common ancestors
[mergetool]
	prompt = true
=======
[mergetool]
    prompt = true
>>>>>>> better git config

<<<<<<< HEAD
[help]
    autocorrect = 1
||||||| merged common ancestors
[difftool]
	prompt = true
=======
[difftool]
    prompt = true
>>>>>>> better git config

<<<<<<< HEAD
[credential]
    helper = cache --timeout=28800
||||||| merged common ancestors
[mergetool "nvimmerge"]
	cmd = nvim -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
=======
[mergetool "nvimmerge"]
    cmd = nvim -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
>>>>>>> better git config

<<<<<<< HEAD
[url "https://github.com/"]
    insteadof = git://github.com/

[url "https://git.openstack.org/"]
    insteadof = git://git.openstack.org/
||||||| merged common ancestors
[difftool "nvimdiff"]
	cmd = nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

[color]
  ui = true
=======
[difftool "nvimdiff"]
    cmd = nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
>>>>>>> better git config

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
